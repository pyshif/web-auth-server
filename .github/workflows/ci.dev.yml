# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Web-Auth-Server CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    environment: dev

    steps:
    - uses: actions/checkout@v3

    - name: Set up Env
      uses: SpicyPizza/create-envfile@v1.3.0
      with:
        directory: ../../
        file_name: .env.dev
        fail_on_empty: true # If set to true, the Action will fail if any env key is empty. Default to false.
        # Mode
        envkey_MODE: ${{ secrets.MODE }}
        # Server
        envkey_SERVER_PORT: ${{ secrets.SERVER_PORT }}
        envkey_SERVER_BASEURL: ${{ secrets.SERVER_BASEURL }}
        envkey_SERVER_EMAIL_VALIDATION_BASEURL: ${{ secrets.SERVER_EMAIL_VALIDATION_BASEURL }}
        envkey_SERVER_EMAIL_VALIDATION_FOR_CHANGING_BASEURL: ${{ secrets.SERVER_EMAIL_VALIDATION_FOR_CHANGING_BASEURL }}
        # Database
        envkey_DB_HOST: ${{ secrets.DB_HOST }}
        envkey_DB_PORT: ${{ secrets.DB_PORT }}
        envkey_DB_USER: ${{ secrets.DB_USER }}
        envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        envkey_DB_NAME: ${{ secrets.DB_NAME }}
        # Client
        envkey_CLIENT_BASEURL: ${{ secrets.CLIENT_BASEURL }}
        envkey_CLIENT_PASSWORD_RESETTING_BASEURL: ${{ secrets.CLIENT_PASSWORD_RESETTING_BASEURL }}
        # Session
        envkey_SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        # JWT
        envkey_JWT_ACCESS_TOKEN_SECRET: ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
        envkey_JWT_REFRESH_TOKEN_SECRET: ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
        envkey_JWT_LINK_TOKEN_SECRET: ${{ secrets.JWT_LINK_TOKEN_SECRET }}
        envkey_JWT_REGULAR_TOKEN_ISS: ${{ secrets.JWT_REGULAR_TOKEN_ISS }}
        envkey_JWT_GOOGLE_TOKEN_ISS: ${{ secrets.JWT_GOOGLE_TOKEN_ISS }}
        envkey_JWT_ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_IN }}
        envkey_JWT_REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_IN }}
        envkey_JWT_LINK_TOKEN_EXPIRES_IN: ${{ secrets.JWT_LINK_TOKEN_EXPIRES_IN }}
        # Google Sign-In Client-ID
        envkey_GOOGLE_SIGNIN_CLIENT_ID: ${{ secrets.GOOGLE_SIGNIN_CLIENT_ID }}
        # AWS SES
        envkey_AWS_SES_SENDER: ${{ secrets.AWS_SES_SENDER }}
        envkey_AWS_SES_HELPER: ${{ secrets.AWS_SES_HELPER }}
        # Cookie (secure and httponly set false for Jest)
        envkey_COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
        envkey_COOKIE_SECURE: ${{ secrets.COOKIE_SECURE }}
        envkey_COOKIE_HTTPONLY: ${{ secrets.COOKIE_HTTPONLY }}

    - name: Current Dir
      run: |
        ls -al
        pwd

    - name: Set up AWS-SES
      run: |
        echo ${{ secrets.AWS_SES_CONFIG }} > ./config.json

    # - name: Shutdown MySQL
    #   run: sudo service mysql stop

    # - name: Set up MariaDB
    #   uses: getong/mariadb-action@v1.1
    #   with:
    #     host port: ${{ secrets.DB_PORT }}
    #     mysql user: ${{ secrets.DB_USER }}
    #     mysql password: ${{ secrets.DB_PASSWORD }}
    - name: Start MySQL
      run: sudo /etc/init.d/mysql start

    - name: Create user
      run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "CREATE USER '${{ secrets.DB_USER }}'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}'"

    - name: Import DB
      run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "source ./database/web-auth.sql"

    - name: show databases;
      run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "show databases; help GRANT;"

    - name: Open Auth
      run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "GRANT ALL ON * TO '${{ secrets.DB_USER }}'@'%'" web-auth
      # run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "GRANT ALL ON '${{ secrets.DB_NAME }}'.* TO '${{ secrets.DB_USER }}'@'%'"

    - name: Print User
      run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "SELECT user, host FROM mysql.user"

    - name: Print Grant Help
      run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "help GRANT"

    # - name: Set up DB
    #   run: |
    #     mysql -P3306 -h127.0.0.1 -uroot -proot -e "source ../../database/web-auth.sql"
      # run: |
      #   mysql -P${{ secrets.DB_PORT}} -h127.0.0.1 -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "show databases;"

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    # Install Server and Packages
    - run: npm i -g pm2
    - run: npm ci
    # Server Start
    # - run: npm start
    # - run: npm run build --if-present
    - run: npm test

    # Server Shutdown
    # - run: npm stop
