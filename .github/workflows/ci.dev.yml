# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Web-Auth-Server CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # os
    runs-on: ubuntu-latest
    # container
    strategy:
      matrix:
        node-version: [16.x]
    # env 
    environment: dev

    steps:
    - name: Clone Repo
      uses: actions/checkout@v3

    - name: Create .env.dev
      run: |
        echo "
        # Mode
        MODE= ${{ secrets.MODE }}
        # Server
        SERVER_PORT= ${{ secrets.SERVER_PORT }}
        SERVER_BASEURL= ${{ secrets.SERVER_BASEURL }}
        SERVER_EMAIL_VALIDATION_BASEURL= ${{ secrets.SERVER_EMAIL_VALIDATION_BASEURL }}
        SERVER_EMAIL_VALIDATION_FOR_CHANGING_BASEURL= ${{ secrets.SERVER_EMAIL_VALIDATION_FOR_CHANGING_BASEURL }}
        # Database
        DB_HOST= ${{ secrets.DB_HOST }}
        DB_PORT= ${{ secrets.DB_PORT }}
        DB_USER= ${{ secrets.DB_USER }}
        DB_PASSWORD= ${{ secrets.DB_PASSWORD }}
        DB_NAME= ${{ secrets.DB_NAME }}
        # Client
        CLIENT_BASEURL= ${{ secrets.CLIENT_BASEURL }}
        CLIENT_PASSWORD_RESETTING_BASEURL= ${{ secrets.CLIENT_PASSWORD_RESETTING_BASEURL }}
        # Session
        SESSION_SECRET= ${{ secrets.SESSION_SECRET }}
        # JWT
        JWT_ACCESS_TOKEN_SECRET= ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
        JWT_REFRESH_TOKEN_SECRET= ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
        JWT_LINK_TOKEN_SECRET= ${{ secrets.JWT_LINK_TOKEN_SECRET }}
        JWT_REGULAR_TOKEN_ISS= ${{ secrets.JWT_REGULAR_TOKEN_ISS }}
        JWT_GOOGLE_TOKEN_ISS= ${{ secrets.JWT_GOOGLE_TOKEN_ISS }}
        JWT_ACCESS_TOKEN_EXPIRES_IN= ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_IN }}
        JWT_REFRESH_TOKEN_EXPIRES_IN= ${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_IN }}
        JWT_LINK_TOKEN_EXPIRES_IN= ${{ secrets.JWT_LINK_TOKEN_EXPIRES_IN }}
        # Google Sign-In Client-ID
        GOOGLE_SIGNIN_CLIENT_ID= ${{ secrets.GOOGLE_SIGNIN_CLIENT_ID }}
        # AWS SES
        AWS_SES_SENDER= ${{ secrets.AWS_SES_SENDER }}
        AWS_SES_HELPER= ${{ secrets.AWS_SES_HELPER }}
        # Cookie (secure and httponly set false for Jest)
        COOKIE_DOMAIN= ${{ secrets.COOKIE_DOMAIN }}
        COOKIE_SECURE= ${{ secrets.COOKIE_SECURE }}
        COOKIE_HTTPONLY= ${{ secrets.COOKIE_HTTPONLY }}" > .env.dev
        ls -al
        cat .env.dev

    - name: Create config.json (aws-ses)
      run: |
        echo "
        {
          \"accessKeyId\": \"${{ secrets.AWS_SES_ACCESS_KEY_ID }}\",
          \"secretAccessKey\": \"${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}\",
          \"region\": \"${{ secrets.AWS_SES_REGION }}\"
        }" > config.json
        ls -al
        cat config.json

    - name: Active MySQL Service
      run: |
        sudo /etc/init.d/mysql start --port=${{ secrets.DB_PORT }}

    # - name: Shutdown MySQL
    #   run: sudo service mysql stop

    # - name: Set up MariaDB
    #   uses: getong/mariadb-action@v1.1
    #   with:
    #     host port: ${{ secrets.DB_PORT }}
    #     mysql user: ${{ secrets.DB_USER }}
    #     mysql password: ${{ secrets.DB_PASSWORD }}

    # - name: Start MySQL
    #   run: sudo /etc/init.d/mysql start

    # - name: Create user
    #   run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "CREATE USER '${{ secrets.DB_USER }}'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}'"

    # - name: Import DB
    #   run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "source ./database/web-auth.sql"

    # - name: show databases;
    #   run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "show databases; help GRANT;"

    # - name: Open Auth
    #   run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "GRANT ALL ON * TO '${{ secrets.DB_USER }}'@'%'" web-auth
    #   # run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "GRANT ALL ON '${{ secrets.DB_NAME }}'.* TO '${{ secrets.DB_USER }}'@'%'"

    # - name: Print User
    #   run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "SELECT user, host FROM mysql.user"

    # - name: Print Grant Help
    #   run: mysql -P3306 -h127.0.0.1 -uroot -proot -e "help GRANT"

    # - name: Set up DB
    #   run: |
    #     mysql -P3306 -h127.0.0.1 -uroot -proot -e "source ../../database/web-auth.sql"
      # run: |
      #   mysql -P${{ secrets.DB_PORT}} -h127.0.0.1 -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "show databases;"

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    # Install Server and Packages
    - run: npm i -g pm2
    - run: npm ci
    # Server Start
    # - run: npm start
    # - run: npm run build --if-present
    - run: npm test

    # Server Shutdown
    # - run: npm stop
